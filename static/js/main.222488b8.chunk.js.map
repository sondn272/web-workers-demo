{"version":3,"sources":["primeNumberCheck.js","worker.js","reportWebVitals.js","index.js","App.js"],"names":["isPrime","num","i","module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","color","setColor","result","setResult","status","setStatus","className","style","background","fontWeight","onClick","a","worker","Worker","name","type","wrap","isPrimeWorker","randomColor","luminosity"],"mappings":"mHAAA,kCAAO,IAAMA,EAAU,SAAAC,GACrB,IAAI,IAAIC,EAAI,EAAGA,EAAID,EAAKC,IACrB,GAAGD,EAAMC,IAAM,EAAG,OAAO,EAE3B,OAAO,I,wCCJVC,EAAOC,QAAU,IAA0B,uD,+GCY5BC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAA,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,K,qICqCeY,IA/CH,WACV,MAA0BG,mBAAS,WAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KAEA,OACE,sBAAKC,UAAU,YAAYC,MAAO,CAACC,WAAYR,GAA/C,UACE,qBAAIM,UAAU,QAAd,8CAAuD,uBAAK,oDAC5D,sBAAKA,UAAU,uBAAf,UACE,sDACA,oBAAGA,UAAU,cAAb,yBAAuC,wBAAQC,MAAO,CAACE,WAAY,KAA5B,uBAAvC,+BACA,sBAAKH,UAAU,OAAf,UACE,wBACEA,UAAU,kBACVI,QAAO,sBAAE,sBAAAC,EAAA,sEACDN,EAAU,eADT,uBAEDF,EAAU,IAFT,mBAGPA,EAHO,SAGSxB,YAAQ,WAHjB,kCAIP0B,EAAU,IAJH,4CAFX,iCAWA,wBACEC,UAAU,kBACVI,QAAO,sBAAE,gCAAAC,EAAA,6DACDC,EAAS,IAAIC,OAAO,EAAY,CAAEC,KAAM,mBAAoBC,UAAKA,IADhE,EAE4BC,YAAKJ,GAAvBK,EAFV,EAECtC,QAFD,SAGD0B,EAAU,eAHT,uBAIDF,EAAU,IAJT,mBAKPA,EALO,SAKSc,EAAc,WALvB,kCAMPZ,EAAU,IANH,4CAFX,iCAcCH,EACD,oBAAGI,UAAU,SAAb,oCAAuCJ,EAAQ,GAAK,OAApD,qBACE,mBAAGI,UAAU,SAAb,SAAuBF,OAG7B,wBAAQE,UAAU,mBAAmBC,MAAO,CAACP,SAAQU,QAAS,kBAAMT,EAASiB,IAAY,CAACC,WAAY,aAAtG,gC","file":"static/js/main.222488b8.chunk.js","sourcesContent":["export const isPrime = num => {\r\n \tfor(let i = 2; i < num; i++) {\r\n    \tif(num % i === 0) return false\r\n  \t}\r\n  \treturn true;\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/js/checkPrimeWorker.a367f4a1.chunk.worker.js\"","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useState } from 'react';\nimport randomColor from 'randomcolor';\nimport { isPrime } from './primeNumberCheck';\nimport { wrap } from 'comlink';\nimport './App.css';\n\nconst App = () => {\n  const [color, setColor] = useState('#33839B');\n  const [result, setResult] = useState('');\n  const [status, setStatus] = useState('')\n\n  return (\n    <div className='container' style={{background: color}}>\n      <h1 className='title'>Parallel computing in React using<br/><strong>Web-Workers</strong></h1>\n      <div className='prime-number-checker'>\n        <h2>Prime number checker</h2>\n        <p className='description'>checking if <strong style={{fontWeight: 600}}>850047799</strong> is a prime number or not</p>\n        <div className='btns'>\n          <button \n            className='prime-check-btn' \n            onClick={async () => {\n              await setStatus('checking...');\n              await setResult('');\n              setResult(await isPrime(850047799));\n              setStatus('');\n            }}\n          >\n            Without Web-Workers\n          </button>\n          <button \n            className='prime-check-btn'\n            onClick={async () => {\n              const worker = new Worker('./worker', { name: 'checkPrimeWorker', type: 'module' });\n              const { isPrime: isPrimeWorker } = wrap(worker);\n              await setStatus('checking...');\n              await setResult('');\n              setResult(await isPrimeWorker(850047799));\n              setStatus('');\n            }}\n          >\n            With Web-Workers\n          </button>\n        </div>\n        {!!result ?\n          <p className='result'>850047799 is {`${result? '' : 'not'}`} a prime number</p>\n          : <p className='result'>{status}</p>\n        }\n      </div>\n      <button className=\"change-color-btn\" style={{color}} onClick={() => setColor(randomColor({luminosity: 'bright'}))}>Change color</button>\n    </div>\n  );\n}\n\nexport default App;\n"],"sourceRoot":""}